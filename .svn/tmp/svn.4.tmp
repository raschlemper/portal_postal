package br.com.portalpostal.servelet;

import Entidade.ClientesUsuario;
import br.com.portalpostal.componentes.ConexaoEntityManager;
import br.com.portalpostal.componentes.ReadFile;
import br.com.portalpostal.entity.PreVenda;
import br.com.portalpostal.prepostagem.dao.ConversorModeloImportacao;
import br.com.portalpostal.prepostagem.dao.PrePostagemDao;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.Part;

@MultipartConfig
public class ServletPreVendaImportar extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html; charset=iso-8859-1");
         response.setCharacterEncoding("iso-8859-1");

        HttpSession sessao = request.getSession();
        String dataBaseName = (String) sessao.getAttribute("empresa");
        String idCliente = String.valueOf(sessao.getAttribute("idCliente"));
        ClientesUsuario usuario  = (ClientesUsuario) sessao.getAttribute("usuario_sessao_cliente");
        String nomeUsuario = String.valueOf(sessao.getAttribute("nomeUser"));
        verificaBancoDeDados(dataBaseName, response);
        final Part filePart = request.getPart("arquivo");
        verificaExtensaoDoArquivo(filePart);
        String nomeLayout = request.getParameter("tipo");
        String servico = request.getParameter("servico");
        String departamento = request.getParameter("departamento");
        

        try{
            EntityManager manager = ConexaoEntityManager.getConnection(dataBaseName);
    
//            List<DestinatarioModelo> destinatarios = converterArquivo(filePart, nomeLayout, manager);
            List<PreVenda> preVendas = new ArrayList<>();
            
           
//            if (!isPossuiServicoDefinido(servico, destinatarios)) {
//                throw new RuntimeException("O arquivo não possui todos os registro com serviço definido.");
//            }

//            for (DestinatarioModelo destinatario : destinatarios) {
//                configuraCodigoFinanceiro(servico, destinatario);
//                destinatario.setCodigoCliente(idCliente);
//                destinatario.setDepartamento(departamento);
//                destinatario.setIdUsuario(String.valueOf(usuario.getId()));
//                destinatario.setNomeUsuario(nomeUsuario);
//                preVendas.add(ConversorModeloImportacao.converter(destinatario));
//            }

            PrePostagemDao prePostagem = new PrePostagemDao(manager);
            prePostagem.persist(preVendas);
            response.sendRedirect("Cliente/Servicos/imp_confirma.jsp");
        } catch (Exception exception) {
            response.sendRedirect("Cliente/Servicos/importacaoPrePostagem.jsp?msg=" +converteMensagem(exception.getMessage()));
        }
            
                
    }
   

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

//     private List<DestinatarioModelo> converterArquivo(final Part filePart, String nomeModelo, EntityManager manager) throws IOException {
//        ConversorDestinatarioModelo conversor = getConversor(filePart, nomeModelo, manager);
//        List<String> linhasDoArquivo = new ReadFile().read(filePart.getInputStream(), "ISO-8859-1");
//        return conversor.converter(linhasDoArquivo);
//    }

//    private ConversorDestinatarioModelo getConversor(final Part filePart, String nomeModelo, EntityManager manager) {
//        ConversorDestinatarioModelo conversor = null;
//        if (filePart.getSubmittedFileName().toUpperCase().contains(".TXT")) {
//            conversor = new ConversorModeloDestinatarioTXT(nomeModelo, manager);
//        } else {
//            conversor = new ConversorModeloDestinatarioCSV(nomeModelo, manager);
//        }
//        return conversor;
//    }

//    private void configuraCodigoFinanceiro(String servico, DestinatarioModelo destinatario) {
//        if (!isTipoServicoArquivo(servico)) {
//            destinatario.setCodigoFinanceiro(servico);
//        }
//    }

    private void verificaBancoDeDados(String nomeBD, HttpServletResponse response) {
        if (nomeBD.isEmpty()) {
            throw new RuntimeException("Sua sessão expirou");
        }
    }

    private void verificaExtensaoDoArquivo(Part filePart) throws IOException {
        String fileName = filePart.getSubmittedFileName();
        if (!fileName.toUpperCase().trim().endsWith(".TXT") && !fileName.toUpperCase().trim().endsWith(".CSV")) {
            throw new RuntimeException("Formato do arquivo de importação inválido");
        }
    }

//    private boolean isPossuiServicoDefinido(String servico,List<DestinatarioModelo> destinatarioModelo) {
//        if(isTipoServicoArquivo(servico)){
//            return destinatarioModelo.stream().allMatch(modelo->!modelo.getCodigoFinanceiro().isEmpty());
//        }
//        return true;
//    }

    private boolean isTipoServicoArquivo(String servico) {
        return servico.equals("ARQUIVO");
    }

    private String converteMensagem(String mensagem) throws UnsupportedEncodingException {
        return new String(mensagem.getBytes("UTF-8"), "ISO-8859-1");
    }

}
